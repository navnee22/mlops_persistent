 ##EventBridge for Data Trigger

resource "aws_cloudwatch_event_rule" "data_trigger" {
  name        = "new-data-trigger"
  description = "Triggers the training pipeline when new data is added"
  event_pattern = jsonencode({
    source = ["aws.s3"]
    detail-type = ["Object Created"]
    detail = {
      bucket = {
        name = ["your-data-bucket"]
      }
    }
  })
}

resource "aws_cloudwatch_event_target" "lambda_trigger" {
  rule      = aws_cloudwatch_event_rule.data_trigger.name
  arn       = aws_lambda_function.training_lambda.arn
}

resource "aws_lambda_permission" "allow_eventbridge" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.training_lambda.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.data_trigger.arn
}


#  Lambda Function
resource "aws_lambda_function" "training_lambda" {
  filename         = "lambda_function.zip"
  function_name    = "training-trigger-lambda"
  role             = aws_iam_role.lambda_exec.arn
  handler          = "lambda_function.lambda_handler"
  runtime          = "python3.9"
  source_code_hash = filebase64sha256("lambda_function.zip")

  environment {
    variables = {
      STEP_FUNCTION_ARN = aws_sfn_state_machine.training_pipeline.arn
    }
  }
}

resource "aws_iam_role" "lambda_exec" {
  name = "lambda-exec-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = "sts:AssumeRole"
        Effect    = "Allow"
        Principal = { Service = "lambda.amazonaws.com" }
      }
    ]
  })
}

resource "aws_iam_role_policy" "lambda_exec_policy" {
  role   = aws_iam_role.lambda_exec.id
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = ["sfn:StartExecution"]
        Resource = ["*"]
      }
    ]
  })
}




3. Step Functions for Orchestration
Define Step Functions to orchestrate:

Training in SageMaker.
Registering the model.
Deploying/updating the endpoint.

resource "aws_sfn_state_machine" "training_pipeline" {
  name     = "training-pipeline"
  role_arn = aws_iam_role.sfn_exec.arn
  definition = jsonencode({
    Comment = "Training and Deployment Pipeline"
    StartAt = "TrainModel"
    States = {
      TrainModel = {
        Type       = "Task"
        Resource   = "arn:aws:states:::sagemaker:createTrainingJob.sync"
        Parameters = {
          TrainingJobName = "ml-training-job"
          ...
        }
        Next = "RegisterModel"
      }
      RegisterModel = {
        Type       = "Task"
        Resource   = "arn:aws:states:::sagemaker:registerModel.sync"
        Parameters = {
          ModelName = "ml-model-name"
          ...
        }
        Next = "DeployEndpoint"
      }
      DeployEndpoint = {
        Type       = "Task"
        Resource   = "arn:aws:states:::sagemaker:createEndpoint.sync"
        Parameters = {
          EndpointName = "ml-endpoint-name"
          ...
        }
        End = true
      }
    }
  })
}

4. Model Monitoring

resource "aws_sagemaker_monitoring_schedule" "model_quality_monitor" {
  monitoring_schedule_name = "model-quality-monitoring"
  monitoring_schedule_config = {
    monitoring_job_definition_name = "model-quality-job"
    schedule_config = {
      schedule_expression = "cron(0 */12 * * ? *)"
    }
  }
}

resource "aws_cloudwatch_metric_alarm" "quality_alarm" {
  alarm_name          = "ModelQualityAlarm"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 1
  metric_name         = "ModelQualityMetric"
  namespace           = "AWS/SageMaker"
  period              = 300
  statistic           = "Average"
  threshold           = 0.7

  alarm_actions = [aws_sns_topic.alert_topic.arn]
}

resource "aws_sns_topic" "alert_topic" {
  name = "ml-quality-alert"
}

resource "aws_sns_topic_subscription" "email_sub" {
  topic_arn = aws_sns_topic.alert_topic.arn
  protocol  = "email"
  endpoint  = "your_email@example.com"
}

3. Deployment Steps
Prepare the Lambda function code, training job configuration, and model registration scripts.
Zip the Lambda function and upload it to Terraform.
Run terraform init, terraform plan, and terraform apply.


Key Notes
Testing: Test each component (EventBridge, Lambda, Step Functions) independently before deploying the full pipeline.
IAM Roles: Ensure all AWS services have the necessary permissions.
Monitoring: Customize CloudWatch Alarms based on your use case.
Scalability: Leverage AWS Step Functionsâ€™ parallel execution if training multiple models.
